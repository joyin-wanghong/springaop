<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
       
<context:annotation-config />
<aop:aspectj-autoproxy proxy-target-class="true" />

<aop:config proxy-target-class="true">
	<aop:pointcut expression="execution(* com.wh..*(..))" id="advicepoint"/>
	<aop:aspect ref="adviceaspect">
		<aop:around method="excute" pointcut-ref="advicepoint"/>
		<aop:before method="before" pointcut-ref="advicepoint" />
		<aop:after-returning method="afterreturning" pointcut-ref="advicepoint" returning="returnvalue" />
		<aop:after method="after" pointcut-ref="advicepoint" />
	</aop:aspect>
</aop:config>

<bean id="adviceaspect" class="com.wh.testspringaop.MyAspect"></bean>
<bean id="testbean" class="com.wh.testspringaop.TestBean" />
        
</beans>